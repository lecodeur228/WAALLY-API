name: Deploy waally-backend

on:
  push:
    branches:
      - dev
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Récupérer le code
        uses: actions/checkout@v3

      - name: Installer SSH et sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Se connecter au VPS et déployer
        run: |
          BRANCH=$(echo $GITHUB_REF | sed 's/refs\/heads\///')

          sshpass -p "${{ secrets.VPS_SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd /var/www/project/laravel/waally-backend || exit 1

            echo "Déploiement de la branche $BRANCH"

            # Récupérer la dernière version du code
            git fetch --all
            git reset --hard origin/$BRANCH

            # Installer les dépendances Laravel
            composer install --no-dev --optimize-autoloader

            # Copier le bon fichier .env
            cp .env.${BRANCH} .env

            # Ajouter les variables DB selon la branche
            if [ "$BRANCH" == "dev" ]; then
              echo "DB_CONNECTION=mysql" >> .env
              echo "DB_HOST=${{ secrets.DB_TEST_HOST }}" >> .env
              echo "DB_USERNAME=${{ secrets.DB_TEST_USERNAME }}" >> .env
              echo "DB_PASSWORD=${{ secrets.DB_TEST_PASSWORD }}" >> .env
              echo "DB_DATABASE=${{ secrets.DB_TEST_DATABASE }}" >> .env
            elif [ "$BRANCH" == "main" ]; then
              echo "DB_CONNECTION=mysql" >> .env
              echo "DB_HOST=${{ secrets.DB_PROD_HOST }}" >> .env
              echo "DB_USERNAME=${{ secrets.DB_PROD_USERNAME }}" >> .env
              echo "DB_PASSWORD=${{ secrets.DB_PROD_PASSWORD }}" >> .env
              echo "DB_DATABASE=${{ secrets.DB_PROD_DATABASE }}" >> .env
            fi

            # Exécuter les migrations
            php artisan migrate --force

            # Appliquer les permissions nécessaires
            chmod -R 775 storage bootstrap/cache

            # Redémarrer les services
            sudo systemctl restart nginx
            sudo systemctl restart php8.1-fpm

            echo "Déploiement terminé avec succès"
          EOF
